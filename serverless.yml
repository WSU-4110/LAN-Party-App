# PROPERTY OF ONLY LANS

# this file is the main config file for our service
# for full config options, make sure to check the docs: docs.serverless.com

service: only-lans
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# we can pin our service to only deploy with a specific Serverless version
frameworkVersion: '2'

provider:
  name: aws
  logRetentionInDays: 30 # avoid meaningless bills
  memorySize: 512
  stage: test
  versionFunctions: false
  runtime: nodejs12.x
  region: us-east-2

  # giving users appropriate permissions to the database, parameters, and any other resources they may need for this service
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "logs:*"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: "*"
    - Effect: "Allow"
      Action: "ssm:GetParameters"
      Resource: "*"
    - Effect: "Allow"
      Action: "kms:Decrypt"
      Resource: "*"

functions:

  # account functions
  SignUp:
    handler: handlers/account.SignUp
    events:
      - http:
          method: POST
          path: /SignUp
          cors: true

  SignIn:
    handler: handlers/account.SignIn
    events:
      - http:
          method: POST
          path: /SignIn
          cors: true

  ViewAccount:
    handler: handlers/account.View
    events:
      - http:
          method: GET
          path: /Account/{ID}
          cors: true

  ViewAllAccounts:
    handler: handlers/account.ViewAll
    events:
      - http:
          method: GET
          path: /Accounts
          cors: true

  # game functions
  ViewGame:
    handler: handlers/game.ViewGame
    events:
      - http:
          method: GET
          path: /Game/{ID}
          cors: true

  ViewAllGames:
    handler: handlers/game.ViewAllGames
    events:
      - http:
          method: GET
          path: /Games
          cors: true

  CreateGame:
    handler: handlers/game.Create
    events:
      - http:
          method: GET
          path: /CreateGame
          cors: true

  # party functions
  CreateParty:
    handler: handlers/party.Create
    events: 
      - http:
          method: POST
          path: /CreateParty
          cors: true

  ViewParty:
    handler: handlers/party.Get
    events:
      - http:
          method: GET
          path: /Party/{ID}
          cors: true

  ViewAllParties:
    handler: handlers/party.GetAll
    events:
      - http:
          method: GET
          path: /Parties
          cors: true
  
  UpdateParty:
    handler: handlers/party.Update
    events:
      - http:
          method: POST
          path: /Party/{ID}/Update
          cors: true

resources:
  Resources:
    # users table
    users:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: USERS-LAN
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
          - AttributeName: Username 
            AttributeType: S
          - AttributeName: Email 
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: Username
            KeySchema:
              - AttributeName: Username
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: Email
            KeySchema:
              - AttributeName: Email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    # games table
    games:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: GAMES-LAN
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
          - AttributeName: Name
            AttributeType: S
          - AttributeName: Genre
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: Name
            KeySchema:
              - AttributeName: Name
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: Genre
            KeySchema:
              - AttributeName: Genre
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    # parties table
    parties:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: PARTIES-LAN
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
          - AttributeName: Name
            AttributeType: S
          - AttributeName: Host
            AttributeType: S
          - AttributeName: Location
            AttributeType: S
          - AttributeName: Time
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: Name
            KeySchema:
              - AttributeName: Name
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: Location
            KeySchema:
              - AttributeName: Location
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: Time
            KeySchema:
              - AttributeName: Time
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: Host
            KeySchema:
              - AttributeName: Host
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST